{"version":3,"sources":["types/FilterTodos.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","id","title","completed","todoSelected","classNames","type","onClick","TodoFilter","query","filterParameter","onInputChange","onSelectChange","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","error","console","finally","href","email","name","App","setTodos","setFilterParameter","setQuery","preparedTodos","todosCopy","filter","toLowerCase","includes","trim","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.316f7a92.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo: Todo) => {\n          const { id, title, completed } = todo;\n          const todoSelected = selectedTodo?.id === id;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': todoSelected,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far', {\n                        'fa-eye-slash': todoSelected,\n                        'fa-eye': !todoSelected,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { TodoStatus } from '../../types/FilterTodos';\n\ntype Props = {\n  query: string;\n  filterParameter: TodoStatus | string;\n  onInputChange: (str: string) => void;\n  onSelectChange: (field: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  filterParameter,\n  onInputChange,\n  onSelectChange,\n}) => {\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onInputChange(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    return onSelectChange(event.target.value);\n  };\n\n  const handleInputClear = () => onInputChange('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterParameter}\n            onChange={handleSelect}\n          >\n            <option value={TodoStatus.All}>All</option>\n            <option value={TodoStatus.Active}>Active</option>\n            <option value={TodoStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleInputClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, setSelectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { id, title, completed } = todo;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/FilterTodos';\n\ntype FilterObject = {\n  query: string;\n  filterParameter?: TodoStatus | string;\n};\n\nconst getFilteredTodos = (todos: Todo[], { query, filterParameter }: FilterObject) => {\n  let todosCopy = [...todos];\n\n  if (query) {\n    todosCopy = todosCopy.filter(todo => {\n      return todo.title.toLowerCase().includes(query.trim().toLowerCase());\n    });\n  }\n\n  if (filterParameter !== TodoStatus.All) {\n    todosCopy = todosCopy.filter(todo => {\n      switch (filterParameter) {\n        case TodoStatus.Active:\n          return !todo.completed;\n\n        case TodoStatus.Completed:\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n  }\n\n  return todosCopy;\n};\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterParameter, setFilterParameter] = useState<TodoStatus | string>(TodoStatus.All);\n  const [query, setQuery] = useState<string>('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedTodos = getFilteredTodos(todos, { query, filterParameter });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterParameter={filterParameter}\n                onInputChange={setQuery}\n                onSelectChange={setFilterParameter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={preparedTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}